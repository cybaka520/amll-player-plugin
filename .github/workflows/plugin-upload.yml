name: 上传插件

on:
  issues:
    types: [opened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  handle:
    if: contains(github.event.issue.labels.*.name, '插件上传/更新')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 安装工具
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq curl

      - name: 解析issue
        id: meta
        run: |
          body='${{ github.event.issue.body }}'
          NAME=$(echo "$body" | awk '/^### 插件名/{getline; while ($0=="") getline; print; exit}' | xargs)
          DESC=$(echo "$body" | awk '/^### 插件简介/{getline; while ($0=="") getline; print; exit}' | xargs)
          AUTHOR=$(echo "$body" | awk '/^### 插件作者/{getline; while ($0=="") getline; print; exit}' | xargs)
          URL=$(echo "$body"  | awk '/^### 插件下载直链/{getline; while ($0=="") getline; print; exit}' | xargs)
          VERSION=$(echo "$body" | awk '/^### 插件版本号/{getline; while ($0=="") getline; print; exit}' | xargs)

          SVG=$(sed -n '/^### SVG 图标/,/^###\|^$/p' <<<"$body" | sed '1d')

          echo "SVG=$SVG" >> $GITHUB_OUTPUT
          echo "NAME=$NAME" >> $GITHUB_OUTPUT
          echo "DESC=$DESC" >> $GITHUB_OUTPUT
          echo "AUTHOR=$AUTHOR" >> $GITHUB_OUTPUT
          echo "URL=$URL" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          echo "==== Parsed ====="
          echo "NAME=[$NAME]"
          echo "DESC=[$DESC]"
          echo "AUTHOR=[$AUTHOR]"
          echo "URL=[$URL]"
          echo "VERSION=[$VERSION]"
          echo "SVG 字节数: $(wc -c <<<"$SVG")"


      - name: 下载插件
        id: dl
        continue-on-error: true
        run: |
          set -e
          URL="${{ steps.meta.outputs.URL }}"
          mkdir -p raw-plugin
          curl -L -o raw-plugin/plugin.js -w "%{http_code}" --fail-with-body "$URL"
          status=$?
          if [ $status -ne 0 ] || [ ! -s raw-plugin/plugin.js ]; then
            echo "success=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          TS=$(date +%s)
          RAND=$(openssl rand -hex 4)
          FILENAME="${TS}-${{ github.event.issue.user.login }}-${RAND}.js"
          mv raw-plugin/plugin.js raw-plugin/"$FILENAME"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "FILENAME=$FILENAME" >> $GITHUB_OUTPUT


      - name: 下载失败处理
        if: steps.dl.outputs.success != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${{ github.event.issue.user.login }} 插件下载失败，请检查直链是否有效。`
            });
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });
            core.setFailed('插件下载失败');


      - name: 添加元数据 & 写入 SVG
        if: steps.dl.outputs.success == 'true'
        run: |
          ENTRY=$(jq -n \
            --arg fn "${{ steps.dl.outputs.FILENAME }}" \
            --arg name "${{ steps.meta.outputs.NAME }}" \
            --arg author "${{ steps.meta.outputs.AUTHOR }}" \
            --arg desc "${{ steps.meta.outputs.DESC }}" \
            --arg version "${{ steps.meta.outputs.VERSION }}" \
            --arg issue "${{ github.event.issue.number }}" \
            '{filename:$fn, name:$name, author:$author, description:$desc, version:$version}')
          echo "$ENTRY" >> metadata/raw-plugin-index.jsonl

          # 写出 SVG（保留换行）
          ICON_FILE="raw-plugin/${{ steps.meta.outputs.NAME }}.svg"
          cat > "$ICON_FILE" <<<"${{ steps.meta.outputs.SVG }}"
          ls -l "$ICON_FILE"
          git add "$ICON_FILE"


      - name: 生成唯一分支名
        id: branch
        run: |
          TS=$(date +%s%3N)
          echo "name=plugin/${{ steps.meta.outputs.NAME }}-${{ github.event.issue.number }}-$TS" >> $GITHUB_OUTPUT


      - name: 创建 PR
        if: steps.dl.outputs.success == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.branch.outputs.name }}
          title: "${{ steps.meta.outputs.NAME }}"
          body: |
            **插件名：** ${{ steps.meta.outputs.NAME }}  
            **作者：** @${{ github.event.issue.user.login }}  
            **版本号：** ${{ steps.meta.outputs.VERSION }}  
            **简介：** ${{ steps.meta.outputs.DESC }}  
            **文件名：** ${{ steps.dl.outputs.FILENAME }}
            **来源 Issue：** #${{ github.event.issue.number }}
          base: main
          commit-message: "Add plugin ${{ steps.meta.outputs.NAME }} from #${{ github.event.issue.number }}"


      - name: 成功创建 PR 后关闭 Issue
        if: steps.dl.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = ${{ github.event.issue.number }};
            const author       = '${{ github.event.issue.user.login }}';
            const pr_url       = '${{ steps.cpr.outputs.pull-request-url }}';
            await github.rest.issues.createComment({
              issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${author} 已创建 PR：${pr_url} ，请等待审核。`
            });
            await github.rest.issues.update({
              issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });
